
ledInterrupts.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002d4  00000368  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  0000036a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000036a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000039c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b09  00000000  00000000  0000045c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000717  00000000  00000000  00000f65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000407  00000000  00000000  0000167c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000110  00000000  00000000  00001a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042e  00000000  00000000  00001b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000015d  00000000  00000000  00001fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  0000211f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 c3 00 	jmp	0x186	; 0x186 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ed       	ldi	r30, 0xD4	; 212
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 77 00 	call	0xee	; 0xee <main>
  9e:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <GPIO_config_output>:
 *           pin_num - Pin designation in the interval 0 to 7
 * Returns:  none
 **********************************************************************/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);
  a6:	fc 01       	movw	r30, r24
  a8:	40 81       	ld	r20, Z
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	30 e0       	ldi	r19, 0x00	; 0
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <GPIO_config_output+0xe>
  b0:	22 0f       	add	r18, r18
  b2:	33 1f       	adc	r19, r19
  b4:	6a 95       	dec	r22
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <GPIO_config_output+0xa>
  b8:	24 2b       	or	r18, r20
  ba:	20 83       	st	Z, r18
  bc:	08 95       	ret

000000be <GPIO_write_high>:
/**********************************************************************
 * Function: GPIO_write_high()
 **********************************************************************/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name | (1<<pin_num);
  be:	fc 01       	movw	r30, r24
  c0:	40 81       	ld	r20, Z
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	02 c0       	rjmp	.+4      	; 0xcc <GPIO_write_high+0xe>
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	6a 95       	dec	r22
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <GPIO_write_high+0xa>
  d0:	24 2b       	or	r18, r20
  d2:	20 83       	st	Z, r18
  d4:	08 95       	ret

000000d6 <GPIO_toggle>:
/**********************************************************************
 * Function: GPIO_toggle()
 **********************************************************************/
void GPIO_toggle(volatile uint8_t *reg_name, uint8_t pin_num)
{
	*reg_name = *reg_name  ^ (1<<pin_num);
  d6:	fc 01       	movw	r30, r24
  d8:	40 81       	ld	r20, Z
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <GPIO_toggle+0xe>
  e0:	22 0f       	add	r18, r18
  e2:	33 1f       	adc	r19, r19
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <GPIO_toggle+0xa>
  e8:	24 27       	eor	r18, r20
  ea:	20 83       	st	Z, r18
  ec:	08 95       	ret

000000ee <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Configuration of LED(s) at port B
    GPIO_config_output(&DDRB, LED_D1);
  ee:	65 e0       	ldi	r22, 0x05	; 5
  f0:	84 e2       	ldi	r24, 0x24	; 36
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRB, LED_D2);
  f8:	64 e0       	ldi	r22, 0x04	; 4
  fa:	84 e2       	ldi	r24, 0x24	; 36
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRB, LED_D3);
 102:	63 e0       	ldi	r22, 0x03	; 3
 104:	84 e2       	ldi	r24, 0x24	; 36
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
	GPIO_config_output(&DDRB, LED_D4);
 10c:	62 e0       	ldi	r22, 0x02	; 2
 10e:	84 e2       	ldi	r24, 0x24	; 36
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 53 00 	call	0xa6	; 0xa6 <GPIO_config_output>
    GPIO_write_high(&PORTB, LED_D1);
 116:	65 e0       	ldi	r22, 0x05	; 5
 118:	85 e2       	ldi	r24, 0x25	; 37
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_high>
	GPIO_write_high(&PORTB, LED_D2);
 120:	64 e0       	ldi	r22, 0x04	; 4
 122:	85 e2       	ldi	r24, 0x25	; 37
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_high>
	GPIO_write_high(&PORTB, LED_D3);
 12a:	63 e0       	ldi	r22, 0x03	; 3
 12c:	85 e2       	ldi	r24, 0x25	; 37
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_high>
	GPIO_write_high(&PORTB, LED_D4);
 134:	62 e0       	ldi	r22, 0x02	; 2
 136:	85 e2       	ldi	r24, 0x25	; 37
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_high>

    // Configuration of 16-bit Timer/Counter1 for LED blinking
    // Set the overflow prescaler to 262 ms and enable interrupt
    TIM1_overflow_262ms();
 13e:	e1 e8       	ldi	r30, 0x81	; 129
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	8b 7f       	andi	r24, 0xFB	; 251
 146:	80 83       	st	Z, r24
 148:	80 81       	ld	r24, Z
 14a:	83 60       	ori	r24, 0x03	; 3
 14c:	80 83       	st	Z, r24
    TIM1_overflow_interrupt_enable();
 14e:	ef e6       	ldi	r30, 0x6F	; 111
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	81 60       	ori	r24, 0x01	; 1
 156:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
 158:	78 94       	sei
 15a:	ff cf       	rjmp	.-2      	; 0x15a <main+0x6c>

0000015c <killAllLeds>:
    return 0;
}

void killAllLeds()
{
	GPIO_write_high(&PORTB, LED_D1);
 15c:	65 e0       	ldi	r22, 0x05	; 5
 15e:	85 e2       	ldi	r24, 0x25	; 37
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_high>
	GPIO_write_high(&PORTB, LED_D2);
 166:	64 e0       	ldi	r22, 0x04	; 4
 168:	85 e2       	ldi	r24, 0x25	; 37
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_high>
	GPIO_write_high(&PORTB, LED_D3);
 170:	63 e0       	ldi	r22, 0x03	; 3
 172:	85 e2       	ldi	r24, 0x25	; 37
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_high>
	GPIO_write_high(&PORTB, LED_D4);
 17a:	62 e0       	ldi	r22, 0x02	; 2
 17c:	85 e2       	ldi	r24, 0x25	; 37
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	0e 94 5f 00 	call	0xbe	; 0xbe <GPIO_write_high>
 184:	08 95       	ret

00000186 <__vector_13>:
/**********************************************************************
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Toggle D1 LED on Multi-function shield.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
 186:	1f 92       	push	r1
 188:	0f 92       	push	r0
 18a:	0f b6       	in	r0, 0x3f	; 63
 18c:	0f 92       	push	r0
 18e:	11 24       	eor	r1, r1
 190:	2f 93       	push	r18
 192:	3f 93       	push	r19
 194:	4f 93       	push	r20
 196:	5f 93       	push	r21
 198:	6f 93       	push	r22
 19a:	7f 93       	push	r23
 19c:	8f 93       	push	r24
 19e:	9f 93       	push	r25
 1a0:	af 93       	push	r26
 1a2:	bf 93       	push	r27
 1a4:	ef 93       	push	r30
 1a6:	ff 93       	push	r31
	static int glob_var = 0; // definuje se pouze jednou
	static int decrement = 1;
	if(glob_var % 3 == 0 ) decrement ^= 1;
 1a8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 1ac:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
 1b0:	c9 01       	movw	r24, r18
 1b2:	63 e0       	ldi	r22, 0x03	; 3
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	0e 94 40 01 	call	0x280	; 0x280 <__divmodhi4>
 1ba:	89 2b       	or	r24, r25
 1bc:	51 f4       	brne	.+20     	; 0x1d2 <__vector_13+0x4c>
 1be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1c6:	41 e0       	ldi	r20, 0x01	; 1
 1c8:	84 27       	eor	r24, r20
 1ca:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1ce:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	if(decrement) glob_var--;
 1d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 1da:	89 2b       	or	r24, r25
 1dc:	39 f0       	breq	.+14     	; 0x1ec <__vector_13+0x66>
 1de:	21 50       	subi	r18, 0x01	; 1
 1e0:	31 09       	sbc	r19, r1
 1e2:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <__data_end+0x1>
 1e6:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__data_end>
 1ea:	06 c0       	rjmp	.+12     	; 0x1f8 <__vector_13+0x72>
	else glob_var++;
 1ec:	2f 5f       	subi	r18, 0xFF	; 255
 1ee:	3f 4f       	sbci	r19, 0xFF	; 255
 1f0:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <__data_end+0x1>
 1f4:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__data_end>
	switch(glob_var)
 1f8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 1fc:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 200:	81 30       	cpi	r24, 0x01	; 1
 202:	91 05       	cpc	r25, r1
 204:	91 f0       	breq	.+36     	; 0x22a <__vector_13+0xa4>
 206:	1c f4       	brge	.+6      	; 0x20e <__vector_13+0x88>
 208:	89 2b       	or	r24, r25
 20a:	39 f0       	breq	.+14     	; 0x21a <__vector_13+0x94>
 20c:	26 c0       	rjmp	.+76     	; 0x25a <__vector_13+0xd4>
 20e:	82 30       	cpi	r24, 0x02	; 2
 210:	91 05       	cpc	r25, r1
 212:	99 f0       	breq	.+38     	; 0x23a <__vector_13+0xb4>
 214:	03 97       	sbiw	r24, 0x03	; 3
 216:	c9 f0       	breq	.+50     	; 0x24a <__vector_13+0xc4>
 218:	20 c0       	rjmp	.+64     	; 0x25a <__vector_13+0xd4>
	{
		case 0: 
			{
				killAllLeds();
 21a:	0e 94 ae 00 	call	0x15c	; 0x15c <killAllLeds>
				GPIO_toggle(&PORTB, LED_D1);break;
 21e:	65 e0       	ldi	r22, 0x05	; 5
 220:	85 e2       	ldi	r24, 0x25	; 37
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_toggle>
 228:	1a c0       	rjmp	.+52     	; 0x25e <__vector_13+0xd8>
			}
		case 1:
			{
				killAllLeds();
 22a:	0e 94 ae 00 	call	0x15c	; 0x15c <killAllLeds>
				GPIO_toggle(&PORTB, LED_D2);break;
 22e:	64 e0       	ldi	r22, 0x04	; 4
 230:	85 e2       	ldi	r24, 0x25	; 37
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_toggle>
 238:	12 c0       	rjmp	.+36     	; 0x25e <__vector_13+0xd8>
			}
		case 2:
			{
				killAllLeds();
 23a:	0e 94 ae 00 	call	0x15c	; 0x15c <killAllLeds>
				GPIO_toggle(&PORTB, LED_D3);break;
 23e:	63 e0       	ldi	r22, 0x03	; 3
 240:	85 e2       	ldi	r24, 0x25	; 37
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_toggle>
 248:	0a c0       	rjmp	.+20     	; 0x25e <__vector_13+0xd8>
			}
		case 3:
			{
				killAllLeds();
 24a:	0e 94 ae 00 	call	0x15c	; 0x15c <killAllLeds>
				GPIO_toggle(&PORTB, LED_D4);break;
 24e:	62 e0       	ldi	r22, 0x02	; 2
 250:	85 e2       	ldi	r24, 0x25	; 37
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 6b 00 	call	0xd6	; 0xd6 <GPIO_toggle>
 258:	02 c0       	rjmp	.+4      	; 0x25e <__vector_13+0xd8>
			}
		default: killAllLeds();
 25a:	0e 94 ae 00 	call	0x15c	; 0x15c <killAllLeds>
	}
    
}
 25e:	ff 91       	pop	r31
 260:	ef 91       	pop	r30
 262:	bf 91       	pop	r27
 264:	af 91       	pop	r26
 266:	9f 91       	pop	r25
 268:	8f 91       	pop	r24
 26a:	7f 91       	pop	r23
 26c:	6f 91       	pop	r22
 26e:	5f 91       	pop	r21
 270:	4f 91       	pop	r20
 272:	3f 91       	pop	r19
 274:	2f 91       	pop	r18
 276:	0f 90       	pop	r0
 278:	0f be       	out	0x3f, r0	; 63
 27a:	0f 90       	pop	r0
 27c:	1f 90       	pop	r1
 27e:	18 95       	reti

00000280 <__divmodhi4>:
 280:	97 fb       	bst	r25, 7
 282:	07 2e       	mov	r0, r23
 284:	16 f4       	brtc	.+4      	; 0x28a <__divmodhi4+0xa>
 286:	00 94       	com	r0
 288:	07 d0       	rcall	.+14     	; 0x298 <__divmodhi4_neg1>
 28a:	77 fd       	sbrc	r23, 7
 28c:	09 d0       	rcall	.+18     	; 0x2a0 <__divmodhi4_neg2>
 28e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__udivmodhi4>
 292:	07 fc       	sbrc	r0, 7
 294:	05 d0       	rcall	.+10     	; 0x2a0 <__divmodhi4_neg2>
 296:	3e f4       	brtc	.+14     	; 0x2a6 <__divmodhi4_exit>

00000298 <__divmodhi4_neg1>:
 298:	90 95       	com	r25
 29a:	81 95       	neg	r24
 29c:	9f 4f       	sbci	r25, 0xFF	; 255
 29e:	08 95       	ret

000002a0 <__divmodhi4_neg2>:
 2a0:	70 95       	com	r23
 2a2:	61 95       	neg	r22
 2a4:	7f 4f       	sbci	r23, 0xFF	; 255

000002a6 <__divmodhi4_exit>:
 2a6:	08 95       	ret

000002a8 <__udivmodhi4>:
 2a8:	aa 1b       	sub	r26, r26
 2aa:	bb 1b       	sub	r27, r27
 2ac:	51 e1       	ldi	r21, 0x11	; 17
 2ae:	07 c0       	rjmp	.+14     	; 0x2be <__udivmodhi4_ep>

000002b0 <__udivmodhi4_loop>:
 2b0:	aa 1f       	adc	r26, r26
 2b2:	bb 1f       	adc	r27, r27
 2b4:	a6 17       	cp	r26, r22
 2b6:	b7 07       	cpc	r27, r23
 2b8:	10 f0       	brcs	.+4      	; 0x2be <__udivmodhi4_ep>
 2ba:	a6 1b       	sub	r26, r22
 2bc:	b7 0b       	sbc	r27, r23

000002be <__udivmodhi4_ep>:
 2be:	88 1f       	adc	r24, r24
 2c0:	99 1f       	adc	r25, r25
 2c2:	5a 95       	dec	r21
 2c4:	a9 f7       	brne	.-22     	; 0x2b0 <__udivmodhi4_loop>
 2c6:	80 95       	com	r24
 2c8:	90 95       	com	r25
 2ca:	bc 01       	movw	r22, r24
 2cc:	cd 01       	movw	r24, r26
 2ce:	08 95       	ret

000002d0 <_exit>:
 2d0:	f8 94       	cli

000002d2 <__stop_program>:
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <__stop_program>
