
08-i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a6  00800100  0000058e  00000622  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000058e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000209  008001a6  008001a6  000006c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  00000738  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000119e  00000000  00000000  00000800  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000991  00000000  00000000  0000199e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000832  00000000  00000000  0000232f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  00002b64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c5  00000000  00000000  00002da4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000742  00000000  00000000  00003369  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003aab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 7d 01 	jmp	0x2fa	; 0x2fa <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 fe 01 	jmp	0x3fc	; 0x3fc <__vector_18>
  4c:	0c 94 2b 02 	jmp	0x456	; 0x456 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e8       	ldi	r30, 0x8E	; 142
  7c:	f5 e0       	ldi	r31, 0x05	; 5
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3a       	cpi	r26, 0xA6	; 166
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a6 ea       	ldi	r26, 0xA6	; 166
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 3a       	cpi	r26, 0xAF	; 175
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 c5 02 	jmp	0x58a	; 0x58a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 ba 01 	call	0x374	; 0x374 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	83 e3       	ldi	r24, 0x33	; 51
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 54 02 	call	0x4a8	; 0x4a8 <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    //TIM1_overflow_33ms();
    //TIM1_overflow_interrupt_enable();
	TIM1_overflow_33ms();
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8a 7f       	andi	r24, 0xFA	; 250
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  cc:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("Scan I2C-bus for slave devices:\033[1E");
  ce:	85 e0       	ldi	r24, 0x05	; 5
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x30>

000000d8 <__vector_13>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER1_OVF_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	2f 93       	push	r18
  e8:	3f 93       	push	r19
  ea:	4f 93       	push	r20
  ec:	5f 93       	push	r21
  ee:	6f 93       	push	r22
  f0:	7f 93       	push	r23
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	af 93       	push	r26
  f8:	bf 93       	push	r27
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
  fe:	cf 93       	push	r28
 100:	df 93       	push	r29
 102:	00 d0       	rcall	.+0      	; 0x104 <__vector_13+0x2c>
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 7;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus
    char uart_string[2] = "00"; // String for converting numbers by itoa()
 108:	80 e3       	ldi	r24, 0x30	; 48
 10a:	90 e3       	ldi	r25, 0x30	; 48
 10c:	9a 83       	std	Y+2, r25	; 0x02
 10e:	89 83       	std	Y+1, r24	; 0x01
	static uint8_t initialised = 0;
	static uint8_t row_counter = 0;
	static uint8_t dev_counter = 0;
	if(!initialised)
 110:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <initialised.2096>
 114:	81 11       	cpse	r24, r1
 116:	2e c0       	rjmp	.+92     	; 0x174 <__vector_13+0x9c>
	{
		uart_puts("      ");
 118:	89 e2       	ldi	r24, 0x29	; 41
 11a:	91 e0       	ldi	r25, 0x01	; 1
 11c:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
		for(int i = 0; i <= 15; i++)
 120:	00 e0       	ldi	r16, 0x00	; 0
 122:	10 e0       	ldi	r17, 0x00	; 0
 124:	15 c0       	rjmp	.+42     	; 0x150 <__vector_13+0x78>
		{
			uart_puts(".");
 126:	80 e3       	ldi	r24, 0x30	; 48
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 12e:	40 e1       	ldi	r20, 0x10	; 16
 130:	be 01       	movw	r22, r28
 132:	6f 5f       	subi	r22, 0xFF	; 255
 134:	7f 4f       	sbci	r23, 0xFF	; 255
 136:	c8 01       	movw	r24, r16
 138:	0e 94 90 02 	call	0x520	; 0x520 <__itoa_ncheck>
			itoa(i,uart_string,16);
			uart_puts(uart_string);
 13c:	ce 01       	movw	r24, r28
 13e:	01 96       	adiw	r24, 0x01	; 1
 140:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
			uart_puts(" ");
 144:	8e e2       	ldi	r24, 0x2E	; 46
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
	static uint8_t row_counter = 0;
	static uint8_t dev_counter = 0;
	if(!initialised)
	{
		uart_puts("      ");
		for(int i = 0; i <= 15; i++)
 14c:	0f 5f       	subi	r16, 0xFF	; 255
 14e:	1f 4f       	sbci	r17, 0xFF	; 255
 150:	00 31       	cpi	r16, 0x10	; 16
 152:	11 05       	cpc	r17, r1
 154:	44 f3       	brlt	.-48     	; 0x126 <__vector_13+0x4e>
			uart_puts(".");
			itoa(i,uart_string,16);
			uart_puts(uart_string);
			uart_puts(" ");
		}
		uart_puts("\033[1E");
 156:	84 e2       	ldi	r24, 0x24	; 36
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
		uart_puts("0x0.: RA RA RA RA RA RA RA RA ");
 15e:	82 e3       	ldi	r24, 0x32	; 50
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
		initialised = !initialised;
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <initialised.2096>
 16c:	91 11       	cpse	r25, r1
 16e:	80 e0       	ldi	r24, 0x00	; 0
 170:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <initialised.2096>
	}
    // FSM
    switch (state)
 174:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <state.2092>
 178:	82 30       	cpi	r24, 0x02	; 2
 17a:	09 f4       	brne	.+2      	; 0x17e <__vector_13+0xa6>
 17c:	69 c0       	rjmp	.+210    	; 0x250 <__vector_13+0x178>
 17e:	18 f4       	brcc	.+6      	; 0x186 <__vector_13+0xae>
 180:	81 30       	cpi	r24, 0x01	; 1
 182:	41 f0       	breq	.+16     	; 0x194 <__vector_13+0xbc>
 184:	a0 c0       	rjmp	.+320    	; 0x2c6 <__vector_13+0x1ee>
 186:	83 30       	cpi	r24, 0x03	; 3
 188:	09 f4       	brne	.+2      	; 0x18c <__vector_13+0xb4>
 18a:	78 c0       	rjmp	.+240    	; 0x27c <__vector_13+0x1a4>
 18c:	84 30       	cpi	r24, 0x04	; 4
 18e:	09 f4       	brne	.+2      	; 0x192 <__vector_13+0xba>
 190:	8d c0       	rjmp	.+282    	; 0x2ac <__vector_13+0x1d4>
 192:	99 c0       	rjmp	.+306    	; 0x2c6 <__vector_13+0x1ee>
    {
    // Increment I2C slave address
    case STATE_IDLE:
        addr++;
 194:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <addr.2093>
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	98 0f       	add	r25, r24
 19c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <addr.2093>
        // If slave address is between 8 and 119 then move to SEND state
		if (addr >= 8 && addr <= 119) 
 1a0:	87 50       	subi	r24, 0x07	; 7
 1a2:	80 37       	cpi	r24, 0x70	; 112
 1a4:	20 f4       	brcc	.+8      	; 0x1ae <__vector_13+0xd6>
		{
			state = STATE_SEND;
 1a6:	82 e0       	ldi	r24, 0x02	; 2
 1a8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state.2092>
 1ac:	26 c0       	rjmp	.+76     	; 0x1fa <__vector_13+0x122>
		}
		else 
		{
			addr = 7;
 1ae:	87 e0       	ldi	r24, 0x07	; 7
 1b0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <addr.2093>
			uart_puts("RA RA RA RA RA RA RA RA");
 1b4:	81 e5       	ldi	r24, 0x51	; 81
 1b6:	91 e0       	ldi	r25, 0x01	; 1
 1b8:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
			uart_puts("\033[1ENumber of detected devices: ");
 1bc:	89 e6       	ldi	r24, 0x69	; 105
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
			uart_puts(itoa(dev_counter,uart_string,10));
 1c4:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <dev_counter.2098>
 1c8:	4a e0       	ldi	r20, 0x0A	; 10
 1ca:	be 01       	movw	r22, r28
 1cc:	6f 5f       	subi	r22, 0xFF	; 255
 1ce:	7f 4f       	sbci	r23, 0xFF	; 255
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 90 02 	call	0x520	; 0x520 <__itoa_ncheck>
 1d6:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
			uart_puts("\033[1E\033[1E");
 1da:	8a e8       	ldi	r24, 0x8A	; 138
 1dc:	91 e0       	ldi	r25, 0x01	; 1
 1de:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
			state = STATE_WAIT;
 1e2:	84 e0       	ldi	r24, 0x04	; 4
 1e4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state.2092>
			dev_counter = 0;
 1e8:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <dev_counter.2098>
			initialised = !initialised; 
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <initialised.2096>
 1f2:	91 11       	cpse	r25, r1
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <initialised.2096>
		}
		if(addr % 16 == 0)
 1fa:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <addr.2093>
 1fe:	8f 70       	andi	r24, 0x0F	; 15
 200:	09 f0       	breq	.+2      	; 0x204 <__vector_13+0x12c>
 202:	64 c0       	rjmp	.+200    	; 0x2cc <__vector_13+0x1f4>
		{
			row_counter++;
 204:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <row_counter.2097>
 208:	8f 5f       	subi	r24, 0xFF	; 255
 20a:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <row_counter.2097>
			if(row_counter >= 8) 
 20e:	88 30       	cpi	r24, 0x08	; 8
 210:	18 f0       	brcs	.+6      	; 0x218 <__vector_13+0x140>
			{
				row_counter = 1;
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <row_counter.2097>
			}
			uart_puts("\033[1E");
 218:	84 e2       	ldi	r24, 0x24	; 36
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
			uart_puts("0x");
 220:	83 e9       	ldi	r24, 0x93	; 147
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
			uart_puts(itoa(row_counter,uart_string,10));
 228:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <row_counter.2097>
 22c:	4a e0       	ldi	r20, 0x0A	; 10
 22e:	be 01       	movw	r22, r28
 230:	6f 5f       	subi	r22, 0xFF	; 255
 232:	7f 4f       	sbci	r23, 0xFF	; 255
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 90 02 	call	0x520	; 0x520 <__itoa_ncheck>
 23a:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
			uart_puts(".:");
 23e:	86 e9       	ldi	r24, 0x96	; 150
 240:	91 e0       	ldi	r25, 0x01	; 1
 242:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
			uart_puts(" ");
 246:	8e e2       	ldi	r24, 0x2E	; 46
 248:	91 e0       	ldi	r25, 0x01	; 1
 24a:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
 24e:	3e c0       	rjmp	.+124    	; 0x2cc <__vector_13+0x1f4>
        // |      from Master       | from Slave |
        // +------------------------+------------+
        // | 7  6  5  4  3  2  1  0 |     ACK    |
        // |a6 a5 a4 a3 a2 a1 a0 R/W|   result   |
        // +------------------------+------------+
        result = twi_start((addr<<1) + TWI_WRITE);
 250:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <addr.2093>
 254:	88 0f       	add	r24, r24
 256:	0e 94 c9 01 	call	0x392	; 0x392 <twi_start>
 25a:	18 2f       	mov	r17, r24
        twi_stop();
 25c:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <twi_stop>
        /* Test result from I2C bus. If it is 0 then move to ACK state, 
         * otherwise move to IDLE */
		if (result) 
 260:	11 23       	and	r17, r17
 262:	41 f0       	breq	.+16     	; 0x274 <__vector_13+0x19c>
		{
			state = STATE_IDLE;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state.2092>
			uart_puts("-- ");
 26a:	89 e9       	ldi	r24, 0x99	; 153
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
 272:	2c c0       	rjmp	.+88     	; 0x2cc <__vector_13+0x1f4>
		}
		else state = STATE_ACK;
 274:	83 e0       	ldi	r24, 0x03	; 3
 276:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state.2092>
 27a:	28 c0       	rjmp	.+80     	; 0x2cc <__vector_13+0x1f4>
        break;

    // A module connected to the bus was found
    case STATE_ACK:
        // Send info about active I2C slave to UART and move to IDLE
		uart_puts(itoa(addr,uart_string,16));
 27c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <addr.2093>
 280:	40 e1       	ldi	r20, 0x10	; 16
 282:	be 01       	movw	r22, r28
 284:	6f 5f       	subi	r22, 0xFF	; 255
 286:	7f 4f       	sbci	r23, 0xFF	; 255
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 90 02 	call	0x520	; 0x520 <__itoa_ncheck>
 28e:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
		uart_puts(" ");
 292:	8e e2       	ldi	r24, 0x2E	; 46
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
		dev_counter++;
 29a:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <dev_counter.2098>
 29e:	8f 5f       	subi	r24, 0xFF	; 255
 2a0:	80 93 a8 01 	sts	0x01A8, r24	; 0x8001a8 <dev_counter.2098>
		state = STATE_IDLE;
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state.2092>
        break;
 2aa:	10 c0       	rjmp	.+32     	; 0x2cc <__vector_13+0x1f4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ac:	2f ef       	ldi	r18, 0xFF	; 255
 2ae:	83 e2       	ldi	r24, 0x23	; 35
 2b0:	94 ef       	ldi	r25, 0xF4	; 244
 2b2:	21 50       	subi	r18, 0x01	; 1
 2b4:	80 40       	sbci	r24, 0x00	; 0
 2b6:	90 40       	sbci	r25, 0x00	; 0
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <__vector_13+0x1da>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <__vector_13+0x1e4>
 2bc:	00 00       	nop

    // If something unexpected happens then move to IDLE
	case STATE_WAIT:
		_delay_ms(10000);
		uart_puts("\033[2J\033[H");
 2be:	8d e9       	ldi	r24, 0x9D	; 157
 2c0:	91 e0       	ldi	r25, 0x01	; 1
 2c2:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
		state = STATE_IDLE;
    default:
        state = STATE_IDLE;
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state.2092>
        break;
    }
}
 2cc:	0f 90       	pop	r0
 2ce:	0f 90       	pop	r0
 2d0:	df 91       	pop	r29
 2d2:	cf 91       	pop	r28
 2d4:	ff 91       	pop	r31
 2d6:	ef 91       	pop	r30
 2d8:	bf 91       	pop	r27
 2da:	af 91       	pop	r26
 2dc:	9f 91       	pop	r25
 2de:	8f 91       	pop	r24
 2e0:	7f 91       	pop	r23
 2e2:	6f 91       	pop	r22
 2e4:	5f 91       	pop	r21
 2e6:	4f 91       	pop	r20
 2e8:	3f 91       	pop	r19
 2ea:	2f 91       	pop	r18
 2ec:	1f 91       	pop	r17
 2ee:	0f 91       	pop	r16
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <__vector_16>:
ISR(TIMER0_OVF_vect)
{
 2fa:	1f 92       	push	r1
 2fc:	0f 92       	push	r0
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	0f 92       	push	r0
 302:	11 24       	eor	r1, r1
 304:	2f 93       	push	r18
 306:	3f 93       	push	r19
 308:	4f 93       	push	r20
 30a:	5f 93       	push	r21
 30c:	6f 93       	push	r22
 30e:	7f 93       	push	r23
 310:	8f 93       	push	r24
 312:	9f 93       	push	r25
 314:	af 93       	push	r26
 316:	bf 93       	push	r27
 318:	ef 93       	push	r30
 31a:	ff 93       	push	r31
	static uint8_t addr = 92;
	static uint8_t data = 0;
	static char temp_buffer[3] = "000";
	twi_start((addr<<1) + TWI_WRITE);
 31c:	88 eb       	ldi	r24, 0xB8	; 184
 31e:	0e 94 c9 01 	call	0x392	; 0x392 <twi_start>
	twi_write(0x02);
 322:	82 e0       	ldi	r24, 0x02	; 2
 324:	0e 94 e6 01 	call	0x3cc	; 0x3cc <twi_write>
	twi_stop();
 328:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <twi_stop>
	twi_start((addr<<1) + TWI_READ);
 32c:	89 eb       	ldi	r24, 0xB9	; 185
 32e:	0e 94 c9 01 	call	0x392	; 0x392 <twi_start>
	data = twi_read_ack();
 332:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <twi_read_ack>
 336:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <__data_end>
	twi_stop();
 33a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <twi_stop>
	uart_puts(itoa(data,temp_buffer,10));
 33e:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <__data_end>
 342:	4a e0       	ldi	r20, 0x0A	; 10
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	71 e0       	ldi	r23, 0x01	; 1
 348:	90 e0       	ldi	r25, 0x00	; 0
 34a:	0e 94 90 02 	call	0x520	; 0x520 <__itoa_ncheck>
 34e:	0e 94 83 02 	call	0x506	; 0x506 <uart_puts>
}
 352:	ff 91       	pop	r31
 354:	ef 91       	pop	r30
 356:	bf 91       	pop	r27
 358:	af 91       	pop	r26
 35a:	9f 91       	pop	r25
 35c:	8f 91       	pop	r24
 35e:	7f 91       	pop	r23
 360:	6f 91       	pop	r22
 362:	5f 91       	pop	r21
 364:	4f 91       	pop	r20
 366:	3f 91       	pop	r19
 368:	2f 91       	pop	r18
 36a:	0f 90       	pop	r0
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	0f 90       	pop	r0
 370:	1f 90       	pop	r1
 372:	18 95       	reti

00000374 <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 374:	87 b1       	in	r24, 0x07	; 7
 376:	8f 7c       	andi	r24, 0xCF	; 207
 378:	87 b9       	out	0x07, r24	; 7
 37a:	88 b1       	in	r24, 0x08	; 8
 37c:	80 63       	ori	r24, 0x30	; 48
 37e:	88 b9       	out	0x08, r24	; 8
 380:	e9 eb       	ldi	r30, 0xB9	; 185
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	8c 7f       	andi	r24, 0xFC	; 252
 388:	80 83       	st	Z, r24
 38a:	88 e4       	ldi	r24, 0x48	; 72
 38c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 390:	08 95       	ret

00000392 <twi_start>:
 392:	94 ea       	ldi	r25, 0xA4	; 164
 394:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 398:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 39c:	99 23       	and	r25, r25
 39e:	e4 f7       	brge	.-8      	; 0x398 <twi_start+0x6>
 3a0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 3a4:	84 e8       	ldi	r24, 0x84	; 132
 3a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3aa:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3ae:	88 23       	and	r24, r24
 3b0:	e4 f7       	brge	.-8      	; 0x3aa <twi_start+0x18>
 3b2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 3b6:	88 7f       	andi	r24, 0xF8	; 248
 3b8:	88 31       	cpi	r24, 0x18	; 24
 3ba:	21 f0       	breq	.+8      	; 0x3c4 <twi_start+0x32>
 3bc:	80 34       	cpi	r24, 0x40	; 64
 3be:	21 f4       	brne	.+8      	; 0x3c8 <twi_start+0x36>
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	08 95       	ret
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	08 95       	ret
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	08 95       	ret

000003cc <twi_write>:
 3cc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 3d0:	84 e8       	ldi	r24, 0x84	; 132
 3d2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3d6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3da:	88 23       	and	r24, r24
 3dc:	e4 f7       	brge	.-8      	; 0x3d6 <twi_write+0xa>
 3de:	08 95       	ret

000003e0 <twi_read_ack>:
 3e0:	84 ec       	ldi	r24, 0xC4	; 196
 3e2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3e6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3ea:	88 23       	and	r24, r24
 3ec:	e4 f7       	brge	.-8      	; 0x3e6 <twi_read_ack+0x6>
 3ee:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 3f2:	08 95       	ret

000003f4 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 3f4:	84 e9       	ldi	r24, 0x94	; 148
 3f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 3fa:	08 95       	ret

000003fc <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 3fc:	1f 92       	push	r1
 3fe:	0f 92       	push	r0
 400:	0f b6       	in	r0, 0x3f	; 63
 402:	0f 92       	push	r0
 404:	11 24       	eor	r1, r1
 406:	2f 93       	push	r18
 408:	8f 93       	push	r24
 40a:	9f 93       	push	r25
 40c:	ef 93       	push	r30
 40e:	ff 93       	push	r31
 410:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 414:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 418:	8c 71       	andi	r24, 0x1C	; 28
 41a:	e0 91 ac 01 	lds	r30, 0x01AC	; 0x8001ac <UART_RxHead>
 41e:	ef 5f       	subi	r30, 0xFF	; 255
 420:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <UART_RxTail>
 424:	e9 17       	cp	r30, r25
 426:	39 f0       	breq	.+14     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 428:	e0 93 ac 01 	sts	0x01AC, r30	; 0x8001ac <UART_RxHead>
 42c:	f0 e0       	ldi	r31, 0x00	; 0
 42e:	e1 55       	subi	r30, 0x51	; 81
 430:	fe 4f       	sbci	r31, 0xFE	; 254
 432:	20 83       	st	Z, r18
 434:	01 c0       	rjmp	.+2      	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 436:	82 e0       	ldi	r24, 0x02	; 2
 438:	90 91 aa 01 	lds	r25, 0x01AA	; 0x8001aa <UART_LastRxError>
 43c:	89 2b       	or	r24, r25
 43e:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <UART_LastRxError>
 442:	ff 91       	pop	r31
 444:	ef 91       	pop	r30
 446:	9f 91       	pop	r25
 448:	8f 91       	pop	r24
 44a:	2f 91       	pop	r18
 44c:	0f 90       	pop	r0
 44e:	0f be       	out	0x3f, r0	; 63
 450:	0f 90       	pop	r0
 452:	1f 90       	pop	r1
 454:	18 95       	reti

00000456 <__vector_19>:
 456:	1f 92       	push	r1
 458:	0f 92       	push	r0
 45a:	0f b6       	in	r0, 0x3f	; 63
 45c:	0f 92       	push	r0
 45e:	11 24       	eor	r1, r1
 460:	8f 93       	push	r24
 462:	9f 93       	push	r25
 464:	ef 93       	push	r30
 466:	ff 93       	push	r31
 468:	90 91 ae 01 	lds	r25, 0x01AE	; 0x8001ae <UART_TxHead>
 46c:	80 91 ad 01 	lds	r24, 0x01AD	; 0x8001ad <UART_TxTail>
 470:	98 17       	cp	r25, r24
 472:	61 f0       	breq	.+24     	; 0x48c <__vector_19+0x36>
 474:	e0 91 ad 01 	lds	r30, 0x01AD	; 0x8001ad <UART_TxTail>
 478:	ef 5f       	subi	r30, 0xFF	; 255
 47a:	e0 93 ad 01 	sts	0x01AD, r30	; 0x8001ad <UART_TxTail>
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	e1 55       	subi	r30, 0x51	; 81
 482:	fd 4f       	sbci	r31, 0xFD	; 253
 484:	80 81       	ld	r24, Z
 486:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 48a:	05 c0       	rjmp	.+10     	; 0x496 <__vector_19+0x40>
 48c:	e1 ec       	ldi	r30, 0xC1	; 193
 48e:	f0 e0       	ldi	r31, 0x00	; 0
 490:	80 81       	ld	r24, Z
 492:	8f 7d       	andi	r24, 0xDF	; 223
 494:	80 83       	st	Z, r24
 496:	ff 91       	pop	r31
 498:	ef 91       	pop	r30
 49a:	9f 91       	pop	r25
 49c:	8f 91       	pop	r24
 49e:	0f 90       	pop	r0
 4a0:	0f be       	out	0x3f, r0	; 63
 4a2:	0f 90       	pop	r0
 4a4:	1f 90       	pop	r1
 4a6:	18 95       	reti

000004a8 <uart_init>:
 4a8:	10 92 ae 01 	sts	0x01AE, r1	; 0x8001ae <UART_TxHead>
 4ac:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <UART_TxTail>
 4b0:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <UART_RxHead>
 4b4:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <UART_RxTail>
 4b8:	28 2f       	mov	r18, r24
 4ba:	39 2f       	mov	r19, r25
 4bc:	33 23       	and	r19, r19
 4be:	1c f4       	brge	.+6      	; 0x4c6 <uart_init+0x1e>
 4c0:	22 e0       	ldi	r18, 0x02	; 2
 4c2:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 4c6:	90 78       	andi	r25, 0x80	; 128
 4c8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 4cc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 4d0:	88 e9       	ldi	r24, 0x98	; 152
 4d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 4d6:	86 e0       	ldi	r24, 0x06	; 6
 4d8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 4dc:	08 95       	ret

000004de <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 4de:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <UART_TxHead>
 4e2:	2f 5f       	subi	r18, 0xFF	; 255

    while (tmphead == UART_TxTail)
 4e4:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <UART_TxTail>
 4e8:	29 17       	cp	r18, r25
 4ea:	e1 f3       	breq	.-8      	; 0x4e4 <uart_putc+0x6>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 4ec:	e2 2f       	mov	r30, r18
 4ee:	f0 e0       	ldi	r31, 0x00	; 0
 4f0:	e1 55       	subi	r30, 0x51	; 81
 4f2:	fd 4f       	sbci	r31, 0xFD	; 253
 4f4:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 4f6:	20 93 ae 01 	sts	0x01AE, r18	; 0x8001ae <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 4fa:	e1 ec       	ldi	r30, 0xC1	; 193
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	80 62       	ori	r24, 0x20	; 32
 502:	80 83       	st	Z, r24
 504:	08 95       	ret

00000506 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
 50a:	ec 01       	movw	r28, r24
    while (*s)
 50c:	03 c0       	rjmp	.+6      	; 0x514 <uart_puts+0xe>
        uart_putc(*s++);
 50e:	21 96       	adiw	r28, 0x01	; 1
 510:	0e 94 6f 02 	call	0x4de	; 0x4de <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 514:	88 81       	ld	r24, Y
 516:	81 11       	cpse	r24, r1
 518:	fa cf       	rjmp	.-12     	; 0x50e <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 51a:	df 91       	pop	r29
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret

00000520 <__itoa_ncheck>:
 520:	bb 27       	eor	r27, r27
 522:	4a 30       	cpi	r20, 0x0A	; 10
 524:	31 f4       	brne	.+12     	; 0x532 <__itoa_ncheck+0x12>
 526:	99 23       	and	r25, r25
 528:	22 f4       	brpl	.+8      	; 0x532 <__itoa_ncheck+0x12>
 52a:	bd e2       	ldi	r27, 0x2D	; 45
 52c:	90 95       	com	r25
 52e:	81 95       	neg	r24
 530:	9f 4f       	sbci	r25, 0xFF	; 255
 532:	0c 94 9c 02 	jmp	0x538	; 0x538 <__utoa_common>

00000536 <__utoa_ncheck>:
 536:	bb 27       	eor	r27, r27

00000538 <__utoa_common>:
 538:	fb 01       	movw	r30, r22
 53a:	55 27       	eor	r21, r21
 53c:	aa 27       	eor	r26, r26
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	aa 1f       	adc	r26, r26
 544:	a4 17       	cp	r26, r20
 546:	10 f0       	brcs	.+4      	; 0x54c <__utoa_common+0x14>
 548:	a4 1b       	sub	r26, r20
 54a:	83 95       	inc	r24
 54c:	50 51       	subi	r21, 0x10	; 16
 54e:	b9 f7       	brne	.-18     	; 0x53e <__utoa_common+0x6>
 550:	a0 5d       	subi	r26, 0xD0	; 208
 552:	aa 33       	cpi	r26, 0x3A	; 58
 554:	08 f0       	brcs	.+2      	; 0x558 <__utoa_common+0x20>
 556:	a9 5d       	subi	r26, 0xD9	; 217
 558:	a1 93       	st	Z+, r26
 55a:	00 97       	sbiw	r24, 0x00	; 0
 55c:	79 f7       	brne	.-34     	; 0x53c <__utoa_common+0x4>
 55e:	b1 11       	cpse	r27, r1
 560:	b1 93       	st	Z+, r27
 562:	11 92       	st	Z+, r1
 564:	cb 01       	movw	r24, r22
 566:	0c 94 b5 02 	jmp	0x56a	; 0x56a <strrev>

0000056a <strrev>:
 56a:	dc 01       	movw	r26, r24
 56c:	fc 01       	movw	r30, r24
 56e:	67 2f       	mov	r22, r23
 570:	71 91       	ld	r23, Z+
 572:	77 23       	and	r23, r23
 574:	e1 f7       	brne	.-8      	; 0x56e <strrev+0x4>
 576:	32 97       	sbiw	r30, 0x02	; 2
 578:	04 c0       	rjmp	.+8      	; 0x582 <strrev+0x18>
 57a:	7c 91       	ld	r23, X
 57c:	6d 93       	st	X+, r22
 57e:	70 83       	st	Z, r23
 580:	62 91       	ld	r22, -Z
 582:	ae 17       	cp	r26, r30
 584:	bf 07       	cpc	r27, r31
 586:	c8 f3       	brcs	.-14     	; 0x57a <strrev+0x10>
 588:	08 95       	ret

0000058a <_exit>:
 58a:	f8 94       	cli

0000058c <__stop_program>:
 58c:	ff cf       	rjmp	.-2      	; 0x58c <__stop_program>
