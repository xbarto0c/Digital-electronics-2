
08-i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000462  000004f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000462  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000046  00800124  00800124  0000051a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000051a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000054c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e3f  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000932  00000000  00000000  00001493  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d6  00000000  00000000  00001dc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  0000249c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000054b  00000000  00000000  000026d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000606  00000000  00000000  00002c23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003229  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 65 01 	jmp	0x2ca	; 0x2ca <__vector_18>
  4c:	0c 94 93 01 	jmp	0x326	; 0x326 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e6       	ldi	r30, 0x62	; 98
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 36       	cpi	r26, 0x6A	; 106
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 2f 02 	jmp	0x45e	; 0x45e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
 * Returns:  none
 **********************************************************************/
int main(void)
{
    // Initialize I2C (TWI)
    twi_init();
  a6:	0e 94 21 01 	call	0x242	; 0x242 <twi_init>

    // Initialize UART to asynchronous, 8N1, 9600
    uart_init(UART_BAUD_SELECT(9600, F_CPU));
  aa:	87 e6       	ldi	r24, 0x67	; 103
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 bd 01 	call	0x37a	; 0x37a <uart_init>

    // Configure 16-bit Timer/Counter1 to update FSM
    // Set prescaler to 33 ms and enable interrupt
    //TIM1_overflow_33ms();
    //TIM1_overflow_interrupt_enable();
	TIM1_overflow_1s();
  b2:	e1 e8       	ldi	r30, 0x81	; 129
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	8c 7f       	andi	r24, 0xFC	; 252
  ba:	80 83       	st	Z, r24
  bc:	80 81       	ld	r24, Z
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
  c2:	ef e6       	ldi	r30, 0x6F	; 111
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	81 60       	ori	r24, 0x01	; 1
  ca:	80 83       	st	Z, r24

    // Enables interrupts by setting the global interrupt mask
    sei();
  cc:	78 94       	sei

    // Put strings to ringbuffer for transmitting via UART
    uart_puts("Initializing sensor:\n");
  ce:	85 e0       	ldi	r24, 0x05	; 5
  d0:	91 e0       	ldi	r25, 0x01	; 1
  d2:	0e 94 ed 01 	call	0x3da	; 0x3da <uart_puts>
  d6:	ff cf       	rjmp	.-2      	; 0xd6 <main+0x30>

000000d8 <__vector_16>:
 * Function: Timer/Counter1 overflow interrupt
 * Purpose:  Update Finite State Machine and test I2C slave addresses 
 *           between 8 and 119.
 **********************************************************************/
ISR(TIMER0_OVF_vect)
{
  d8:	1f 92       	push	r1
  da:	0f 92       	push	r0
  dc:	0f b6       	in	r0, 0x3f	; 63
  de:	0f 92       	push	r0
  e0:	11 24       	eor	r1, r1
  e2:	1f 93       	push	r17
  e4:	2f 93       	push	r18
  e6:	3f 93       	push	r19
  e8:	4f 93       	push	r20
  ea:	5f 93       	push	r21
  ec:	6f 93       	push	r22
  ee:	7f 93       	push	r23
  f0:	8f 93       	push	r24
  f2:	9f 93       	push	r25
  f4:	af 93       	push	r26
  f6:	bf 93       	push	r27
  f8:	ef 93       	push	r30
  fa:	ff 93       	push	r31
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	00 d0       	rcall	.+0      	; 0x102 <__vector_16+0x2a>
 102:	cd b7       	in	r28, 0x3d	; 61
 104:	de b7       	in	r29, 0x3e	; 62
    static state_t state = STATE_IDLE;  // Current state of the FSM
    static uint8_t addr = 7;            // I2C slave address
    uint8_t result = 1;                 // ACK result from the bus
    char uart_string[2] = "00"; // String for converting numbers by itoa()
 106:	80 e3       	ldi	r24, 0x30	; 48
 108:	90 e3       	ldi	r25, 0x30	; 48
 10a:	9a 83       	std	Y+2, r25	; 0x02
 10c:	89 83       	std	Y+1, r24	; 0x01

    // FSM
    switch (state)
 10e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <state.1964>
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	a9 f0       	breq	.+42     	; 0x140 <__vector_16+0x68>
 116:	83 30       	cpi	r24, 0x03	; 3
 118:	29 f1       	breq	.+74     	; 0x164 <__vector_16+0x8c>
 11a:	81 30       	cpi	r24, 0x01	; 1
 11c:	e1 f5       	brne	.+120    	; 0x196 <__vector_16+0xbe>
    {
    // Increment I2C slave address
    case STATE_IDLE:
        addr++;
 11e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <addr.1965>
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	98 0f       	add	r25, r24
 126:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <addr.1965>
        // If slave address is between 8 and 119 then move to SEND state
		if (addr >= 8 && addr <= 119) state = STATE_SEND;
 12a:	87 50       	subi	r24, 0x07	; 7
 12c:	80 37       	cpi	r24, 0x70	; 112
 12e:	20 f4       	brcc	.+8      	; 0x138 <__vector_16+0x60>
 130:	82 e0       	ldi	r24, 0x02	; 2
 132:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state.1964>
 136:	32 c0       	rjmp	.+100    	; 0x19c <__vector_16+0xc4>
		else addr = 7; 
 138:	87 e0       	ldi	r24, 0x07	; 7
 13a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <addr.1965>
 13e:	2e c0       	rjmp	.+92     	; 0x19c <__vector_16+0xc4>
        // |      from Master       | from Slave |
        // +------------------------+------------+
        // | 7  6  5  4  3  2  1  0 |     ACK    |
        // |a6 a5 a4 a3 a2 a1 a0 R/W|   result   |
        // +------------------------+------------+
        result = twi_start((addr<<1) + TWI_WRITE);
 140:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <addr.1965>
 144:	88 0f       	add	r24, r24
 146:	0e 94 30 01 	call	0x260	; 0x260 <twi_start>
 14a:	18 2f       	mov	r17, r24
        twi_stop();
 14c:	0e 94 61 01 	call	0x2c2	; 0x2c2 <twi_stop>
        /* Test result from I2C bus. If it is 0 then move to ACK state, 
         * otherwise move to IDLE */
		if (result) state = STATE_IDLE;
 150:	11 23       	and	r17, r17
 152:	21 f0       	breq	.+8      	; 0x15c <__vector_16+0x84>
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state.1964>
 15a:	20 c0       	rjmp	.+64     	; 0x19c <__vector_16+0xc4>
		else state = STATE_ACK;
 15c:	83 e0       	ldi	r24, 0x03	; 3
 15e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state.1964>
 162:	1c c0       	rjmp	.+56     	; 0x19c <__vector_16+0xc4>
        break;

    // A module connected to the bus was found
    case STATE_ACK:
        // Send info about active I2C slave to UART and move to IDLE
		uart_puts("address:");
 164:	8b e1       	ldi	r24, 0x1B	; 27
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	0e 94 ed 01 	call	0x3da	; 0x3da <uart_puts>
		itoa(addr,uart_string,16);
 16c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <addr.1965>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 170:	40 e1       	ldi	r20, 0x10	; 16
 172:	be 01       	movw	r22, r28
 174:	6f 5f       	subi	r22, 0xFF	; 255
 176:	7f 4f       	sbci	r23, 0xFF	; 255
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__itoa_ncheck>
		uart_puts(uart_string);
 17e:	ce 01       	movw	r24, r28
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	0e 94 ed 01 	call	0x3da	; 0x3da <uart_puts>
		uart_puts("\n");
 186:	89 e1       	ldi	r24, 0x19	; 25
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 ed 01 	call	0x3da	; 0x3da <uart_puts>
		state = STATE_IDLE;
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state.1964>
        break;
 194:	03 c0       	rjmp	.+6      	; 0x19c <__vector_16+0xc4>

    // If something unexpected happens then move to IDLE
    default:
        state = STATE_IDLE;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <state.1964>
        break;
    }
}
 19c:	0f 90       	pop	r0
 19e:	0f 90       	pop	r0
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	ff 91       	pop	r31
 1a6:	ef 91       	pop	r30
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	7f 91       	pop	r23
 1b2:	6f 91       	pop	r22
 1b4:	5f 91       	pop	r21
 1b6:	4f 91       	pop	r20
 1b8:	3f 91       	pop	r19
 1ba:	2f 91       	pop	r18
 1bc:	1f 91       	pop	r17
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <__vector_13>:
ISR(TIMER1_OVF_vect)
{
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	4f 93       	push	r20
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
	static uint8_t addr = 92;
	static uint8_t data = 0;
	static char temp_buffer[3] = "000";
	twi_start((addr<<1) + TWI_WRITE);
 1ea:	88 eb       	ldi	r24, 0xB8	; 184
 1ec:	0e 94 30 01 	call	0x260	; 0x260 <twi_start>
	twi_write(0x02);
 1f0:	82 e0       	ldi	r24, 0x02	; 2
 1f2:	0e 94 4d 01 	call	0x29a	; 0x29a <twi_write>
	twi_stop();
 1f6:	0e 94 61 01 	call	0x2c2	; 0x2c2 <twi_stop>
	twi_start((addr<<1) + TWI_READ);
 1fa:	89 eb       	ldi	r24, 0xB9	; 185
 1fc:	0e 94 30 01 	call	0x260	; 0x260 <twi_start>
	data = twi_read_ack();
 200:	0e 94 57 01 	call	0x2ae	; 0x2ae <twi_read_ack>
 204:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
	twi_stop();
 208:	0e 94 61 01 	call	0x2c2	; 0x2c2 <twi_stop>
	uart_puts(itoa(data,temp_buffer,10));
 20c:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 210:	4a e0       	ldi	r20, 0x0A	; 10
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	71 e0       	ldi	r23, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__itoa_ncheck>
 21c:	0e 94 ed 01 	call	0x3da	; 0x3da <uart_puts>
}
 220:	ff 91       	pop	r31
 222:	ef 91       	pop	r30
 224:	bf 91       	pop	r27
 226:	af 91       	pop	r26
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	7f 91       	pop	r23
 22e:	6f 91       	pop	r22
 230:	5f 91       	pop	r21
 232:	4f 91       	pop	r20
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <twi_init>:
{
    TWCR = _BV(TWINT) | _BV(TWEN);

    while ((TWCR & _BV(TWINT)) == 0);
    return (TWDR);
}
 242:	87 b1       	in	r24, 0x07	; 7
 244:	8f 7c       	andi	r24, 0xCF	; 207
 246:	87 b9       	out	0x07, r24	; 7
 248:	88 b1       	in	r24, 0x08	; 8
 24a:	80 63       	ori	r24, 0x30	; 48
 24c:	88 b9       	out	0x08, r24	; 8
 24e:	e9 eb       	ldi	r30, 0xB9	; 185
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	8c 7f       	andi	r24, 0xFC	; 252
 256:	80 83       	st	Z, r24
 258:	88 e9       	ldi	r24, 0x98	; 152
 25a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 25e:	08 95       	ret

00000260 <twi_start>:
 260:	94 ea       	ldi	r25, 0xA4	; 164
 262:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 266:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 26a:	99 23       	and	r25, r25
 26c:	e4 f7       	brge	.-8      	; 0x266 <twi_start+0x6>
 26e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 272:	84 e8       	ldi	r24, 0x84	; 132
 274:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 278:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 27c:	88 23       	and	r24, r24
 27e:	e4 f7       	brge	.-8      	; 0x278 <twi_start+0x18>
 280:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 284:	88 7f       	andi	r24, 0xF8	; 248
 286:	88 31       	cpi	r24, 0x18	; 24
 288:	21 f0       	breq	.+8      	; 0x292 <twi_start+0x32>
 28a:	80 34       	cpi	r24, 0x40	; 64
 28c:	21 f4       	brne	.+8      	; 0x296 <twi_start+0x36>
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	08 95       	ret
 292:	80 e0       	ldi	r24, 0x00	; 0
 294:	08 95       	ret
 296:	81 e0       	ldi	r24, 0x01	; 1
 298:	08 95       	ret

0000029a <twi_write>:
 29a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 29e:	84 e8       	ldi	r24, 0x84	; 132
 2a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2a8:	88 23       	and	r24, r24
 2aa:	e4 f7       	brge	.-8      	; 0x2a4 <twi_write+0xa>
 2ac:	08 95       	ret

000002ae <twi_read_ack>:
 2ae:	84 ec       	ldi	r24, 0xC4	; 196
 2b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2b4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2b8:	88 23       	and	r24, r24
 2ba:	e4 f7       	brge	.-8      	; 0x2b4 <twi_read_ack+0x6>
 2bc:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 2c0:	08 95       	ret

000002c2 <twi_stop>:
 * Purpose:  Generates stop condition on TWI bus.
 * Returns:  none
 **********************************************************************/
void twi_stop(void)
{
    TWCR = _BV(TWINT) | _BV(TWSTO) | _BV(TWEN);
 2c2:	84 e9       	ldi	r24, 0x94	; 148
 2c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2c8:	08 95       	ret

000002ca <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
 2ca:	1f 92       	push	r1
 2cc:	0f 92       	push	r0
 2ce:	0f b6       	in	r0, 0x3f	; 63
 2d0:	0f 92       	push	r0
 2d2:	11 24       	eor	r1, r1
 2d4:	2f 93       	push	r18
 2d6:	8f 93       	push	r24
 2d8:	9f 93       	push	r25
 2da:	ef 93       	push	r30
 2dc:	ff 93       	push	r31
 2de:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 2e2:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 2e6:	8c 71       	andi	r24, 0x1C	; 28
 2e8:	e0 91 27 01 	lds	r30, 0x0127	; 0x800127 <UART_RxHead>
 2ec:	ef 5f       	subi	r30, 0xFF	; 255
 2ee:	ef 71       	andi	r30, 0x1F	; 31
 2f0:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <UART_RxTail>
 2f4:	e9 17       	cp	r30, r25
 2f6:	39 f0       	breq	.+14     	; 0x306 <__vector_18+0x3c>
 2f8:	e0 93 27 01 	sts	0x0127, r30	; 0x800127 <UART_RxHead>
 2fc:	f0 e0       	ldi	r31, 0x00	; 0
 2fe:	e6 5d       	subi	r30, 0xD6	; 214
 300:	fe 4f       	sbci	r31, 0xFE	; 254
 302:	20 83       	st	Z, r18
 304:	01 c0       	rjmp	.+2      	; 0x308 <__vector_18+0x3e>
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <UART_LastRxError>
 30c:	89 2b       	or	r24, r25
 30e:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <UART_LastRxError>
 312:	ff 91       	pop	r31
 314:	ef 91       	pop	r30
 316:	9f 91       	pop	r25
 318:	8f 91       	pop	r24
 31a:	2f 91       	pop	r18
 31c:	0f 90       	pop	r0
 31e:	0f be       	out	0x3f, r0	; 63
 320:	0f 90       	pop	r0
 322:	1f 90       	pop	r1
 324:	18 95       	reti

00000326 <__vector_19>:
 326:	1f 92       	push	r1
 328:	0f 92       	push	r0
 32a:	0f b6       	in	r0, 0x3f	; 63
 32c:	0f 92       	push	r0
 32e:	11 24       	eor	r1, r1
 330:	8f 93       	push	r24
 332:	9f 93       	push	r25
 334:	ef 93       	push	r30
 336:	ff 93       	push	r31
 338:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <UART_TxHead>
 33c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <UART_TxTail>
 340:	98 17       	cp	r25, r24
 342:	69 f0       	breq	.+26     	; 0x35e <__vector_19+0x38>
 344:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <UART_TxTail>
 348:	ef 5f       	subi	r30, 0xFF	; 255
 34a:	ef 71       	andi	r30, 0x1F	; 31
 34c:	e0 93 28 01 	sts	0x0128, r30	; 0x800128 <UART_TxTail>
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	e6 5b       	subi	r30, 0xB6	; 182
 354:	fe 4f       	sbci	r31, 0xFE	; 254
 356:	80 81       	ld	r24, Z
 358:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 35c:	05 c0       	rjmp	.+10     	; 0x368 <__vector_19+0x42>
 35e:	e1 ec       	ldi	r30, 0xC1	; 193
 360:	f0 e0       	ldi	r31, 0x00	; 0
 362:	80 81       	ld	r24, Z
 364:	8f 7d       	andi	r24, 0xDF	; 223
 366:	80 83       	st	Z, r24
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	9f 91       	pop	r25
 36e:	8f 91       	pop	r24
 370:	0f 90       	pop	r0
 372:	0f be       	out	0x3f, r0	; 63
 374:	0f 90       	pop	r0
 376:	1f 90       	pop	r1
 378:	18 95       	reti

0000037a <uart_init>:
 37a:	10 92 29 01 	sts	0x0129, r1	; 0x800129 <UART_TxHead>
 37e:	10 92 28 01 	sts	0x0128, r1	; 0x800128 <UART_TxTail>
 382:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <UART_RxHead>
 386:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <UART_RxTail>
 38a:	28 2f       	mov	r18, r24
 38c:	39 2f       	mov	r19, r25
 38e:	33 23       	and	r19, r19
 390:	1c f4       	brge	.+6      	; 0x398 <uart_init+0x1e>
 392:	22 e0       	ldi	r18, 0x02	; 2
 394:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 398:	90 78       	andi	r25, 0x80	; 128
 39a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 39e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 3a2:	88 e9       	ldi	r24, 0x98	; 152
 3a4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 3a8:	86 e0       	ldi	r24, 0x06	; 6
 3aa:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 3ae:	08 95       	ret

000003b0 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 3b0:	20 91 29 01 	lds	r18, 0x0129	; 0x800129 <UART_TxHead>
 3b4:	2f 5f       	subi	r18, 0xFF	; 255
 3b6:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
 3b8:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <UART_TxTail>
 3bc:	29 17       	cp	r18, r25
 3be:	e1 f3       	breq	.-8      	; 0x3b8 <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
 3c0:	e2 2f       	mov	r30, r18
 3c2:	f0 e0       	ldi	r31, 0x00	; 0
 3c4:	e6 5b       	subi	r30, 0xB6	; 182
 3c6:	fe 4f       	sbci	r31, 0xFE	; 254
 3c8:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
 3ca:	20 93 29 01 	sts	0x0129, r18	; 0x800129 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
 3ce:	e1 ec       	ldi	r30, 0xC1	; 193
 3d0:	f0 e0       	ldi	r31, 0x00	; 0
 3d2:	80 81       	ld	r24, Z
 3d4:	80 62       	ori	r24, 0x20	; 32
 3d6:	80 83       	st	Z, r24
 3d8:	08 95       	ret

000003da <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
 3da:	cf 93       	push	r28
 3dc:	df 93       	push	r29
 3de:	ec 01       	movw	r28, r24
    while (*s)
 3e0:	03 c0       	rjmp	.+6      	; 0x3e8 <uart_puts+0xe>
        uart_putc(*s++);
 3e2:	21 96       	adiw	r28, 0x01	; 1
 3e4:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
 3e8:	88 81       	ld	r24, Y
 3ea:	81 11       	cpse	r24, r1
 3ec:	fa cf       	rjmp	.-12     	; 0x3e2 <uart_puts+0x8>
        uart_putc(*s++);
}/* uart_puts */
 3ee:	df 91       	pop	r29
 3f0:	cf 91       	pop	r28
 3f2:	08 95       	ret

000003f4 <__itoa_ncheck>:
 3f4:	bb 27       	eor	r27, r27
 3f6:	4a 30       	cpi	r20, 0x0A	; 10
 3f8:	31 f4       	brne	.+12     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3fa:	99 23       	and	r25, r25
 3fc:	22 f4       	brpl	.+8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3fe:	bd e2       	ldi	r27, 0x2D	; 45
 400:	90 95       	com	r25
 402:	81 95       	neg	r24
 404:	9f 4f       	sbci	r25, 0xFF	; 255
 406:	0c 94 06 02 	jmp	0x40c	; 0x40c <__utoa_common>

0000040a <__utoa_ncheck>:
 40a:	bb 27       	eor	r27, r27

0000040c <__utoa_common>:
 40c:	fb 01       	movw	r30, r22
 40e:	55 27       	eor	r21, r21
 410:	aa 27       	eor	r26, r26
 412:	88 0f       	add	r24, r24
 414:	99 1f       	adc	r25, r25
 416:	aa 1f       	adc	r26, r26
 418:	a4 17       	cp	r26, r20
 41a:	10 f0       	brcs	.+4      	; 0x420 <__utoa_common+0x14>
 41c:	a4 1b       	sub	r26, r20
 41e:	83 95       	inc	r24
 420:	50 51       	subi	r21, 0x10	; 16
 422:	b9 f7       	brne	.-18     	; 0x412 <__utoa_common+0x6>
 424:	a0 5d       	subi	r26, 0xD0	; 208
 426:	aa 33       	cpi	r26, 0x3A	; 58
 428:	08 f0       	brcs	.+2      	; 0x42c <__utoa_common+0x20>
 42a:	a9 5d       	subi	r26, 0xD9	; 217
 42c:	a1 93       	st	Z+, r26
 42e:	00 97       	sbiw	r24, 0x00	; 0
 430:	79 f7       	brne	.-34     	; 0x410 <__utoa_common+0x4>
 432:	b1 11       	cpse	r27, r1
 434:	b1 93       	st	Z+, r27
 436:	11 92       	st	Z+, r1
 438:	cb 01       	movw	r24, r22
 43a:	0c 94 1f 02 	jmp	0x43e	; 0x43e <strrev>

0000043e <strrev>:
 43e:	dc 01       	movw	r26, r24
 440:	fc 01       	movw	r30, r24
 442:	67 2f       	mov	r22, r23
 444:	71 91       	ld	r23, Z+
 446:	77 23       	and	r23, r23
 448:	e1 f7       	brne	.-8      	; 0x442 <strrev+0x4>
 44a:	32 97       	sbiw	r30, 0x02	; 2
 44c:	04 c0       	rjmp	.+8      	; 0x456 <strrev+0x18>
 44e:	7c 91       	ld	r23, X
 450:	6d 93       	st	X+, r22
 452:	70 83       	st	Z, r23
 454:	62 91       	ld	r22, -Z
 456:	ae 17       	cp	r26, r30
 458:	bf 07       	cpc	r27, r31
 45a:	c8 f3       	brcs	.-14     	; 0x44e <strrev+0x10>
 45c:	08 95       	ret

0000045e <_exit>:
 45e:	f8 94       	cli

00000460 <__stop_program>:
 460:	ff cf       	rjmp	.-2      	; 0x460 <__stop_program>
